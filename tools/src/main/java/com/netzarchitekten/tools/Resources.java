/**
 * DNA Android Tools.
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Die Netzarchitekten e.U., Benjamin Erhart
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.netzarchitekten.tools;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.LocaleList;
import android.util.DisplayMetrics;

import java.util.Locale;

/**
 * Encapsulates deprecation warning for
 * <ul>
 *     <li>{@link android.content.res.Resources#getColor(int)} since Marshmallow (API 23)</li>
 *     <li>{@link android.content.res.Resources#getDrawable(int)} since Lollipop MR1 (API 22)</li>
 *     <li>{@link android.content.res.Configuration#locale} since N (API 24)</li>
 * </ul>
 * <p>
 * Contains a static and an OO interface.
 * </p>
 *
 * @author Benjamin Erhart {@literal <berhart@netzarchitekten.com>}
 */
@SuppressWarnings({"WeakerAccess", "unused"})
public class Resources {

    private final android.content.res.Resources mResources;

    /**
     * @param context
     *            A context object to access the
     *            {@link android.content.res.Resources} of the app.
     */
    public Resources(Context context) {
        mResources = context.getResources();
    }

    /**
     * Honor deprecation of {@link android.content.res.Resources#getColor(int)}
     * since API 23.
     *
     * @param id
     *            The desired resource identifier, as generated by the aapt
     *            tool. This integer encodes the package, type, and resource
     *            entry. The value 0 is an invalid identifier.
     * @return a single color value in the form 0xAARRGGBB.
     * @see android.content.res.Resources#getColor(int, android.content.res.Resources.Theme)
     */
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    public int getColor(int id) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1)
            return mResources.getColor(id, null);

        return mResources.getColor(id);
    }

    /**
     * Honor deprecation of
     * {@link android.content.res.Resources#getDrawable(int)} since API 22.
     *
     * @param id
     *            The desired resource identifier, as generated by the aapt
     *            tool. This integer encodes the package, type, and resource
     *            entry. The value 0 is an invalid identifier.
     * @return an object that can be used to draw this resource.
     */
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    public Drawable getDrawable(int id) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT_WATCH)
            return mResources.getDrawable(id, null);

        return mResources.getDrawable(id);
    }

    /**
     * Honor deprecation of {@link Configuration#locale} since API 24.
     *
     * @return the currently used primary locale.
     */
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    public Locale getPrimaryLocale() {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M)
            return mResources.getConfiguration().getLocales().get(0);

        return mResources.getConfiguration().locale;
    }

    /**
     * <p>
     * Sets a new (and only) locale for this app until it is reset using {@link #resetLocale()},
     * <b>as long</b>, as the primary locale isn't already the same.
     * </p>
     * <p>
     * Makes use of a side-effect of
     * {@link android.content.res.Resources#Resources(AssetManager, DisplayMetrics, Configuration)},
     * which propagates the localization change.
     * </p>
     *
     * @param newLocale
     *            The new {@link Locale}.
     * @return this object for fluency.
     */
    @SuppressWarnings("deprecation")
    @SuppressLint("NewApi")
    public Resources setLocale(Locale newLocale) {
        if (!getPrimaryLocale().equals(newLocale)) {
            Configuration newConfig = new Configuration(mResources.getConfiguration());

            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M) {
                newConfig.setLocales(new LocaleList(newLocale));
            } else {
                newConfig.locale = newLocale;
            }

            new android.content.res.Resources(mResources.getAssets(),
                mResources.getDisplayMetrics(),
                newConfig);
        }

        return this;
    }

    /**
     * <p>
     * Sets a new (and only) locale for this app until it is reset using {@link #resetLocale()}.
     * </p>
     * <p>
     * Makes use of a side-effect of
     * {@link android.content.res.Resources#Resources(AssetManager, DisplayMetrics, Configuration)},
     * which propagates the localization change.
     * </p>
     *
     * @param newLocale
     *            The new locale as {@link String}.
     * @return this object for fluency.
     */
    public Resources setLocale(String newLocale) {
        return setLocale(new Locale(newLocale));
    }

    /**
     * Reset the current primary locale to the originally set device's locale using a
     * side-effect of
     * {@link android.content.res.Resources#Resources(AssetManager, DisplayMetrics, Configuration)}.
     * @return this object for fluency.
     */
    public Resources resetLocale() {
        new android.content.res.Resources(mResources.getAssets(),
            mResources.getDisplayMetrics(),
            mResources.getConfiguration());

        return this;
    }

    /**
     * @param context
     *            A context object to access the
     *            {@link android.content.res.Resources} of the app.
     * @param id
     *            The desired resource identifier, as generated by the aapt
     *            tool. This integer encodes the package, type, and resource
     *            entry. The value 0 is an invalid identifier.
     * @return a single color value in the form 0xAARRGGBB.
     */
    public static int getColor(Context context, int id) {
        return new Resources(context).getColor(id);
    }

    /**
     * @param context
     *            A context object to access the
     *            {@link android.content.res.Resources} of the app.
     * @param id
     *            The desired resource identifier, as generated by the aapt
     *            tool. This integer encodes the package, type, and resource
     *            entry. The value 0 is an invalid identifier.
     * @return an object that can be used to draw this resource.
     */
    public static Drawable getDrawable(Context context, int id) {
        return new Resources(context).getDrawable(id);
    }

    /**
     * @param context
     *            A context object to access the
     *            {@link android.content.res.Resources} of the app.
     * @return the currently used primary locale.
     */
    public static Locale getPrimaryLocale(Context context) {
        return new Resources(context).getPrimaryLocale();
    }

    /**
     * @param context
     *            A context object to access the
     *            {@link android.content.res.Resources} of the app.
     * @param newLocale
     *            The new {@link Locale}.
     * @return this object for fluency.
     */
    public static Resources setLocale(Context context, Locale newLocale) {
        return new Resources(context).setLocale(newLocale);
    }

    /**
     * @param context
     *            A context object to access the
     *            {@link android.content.res.Resources} of the app.
     * @param newLocale
     *            The new locale as {@link String}.
     * @return this object for fluency.
     */
    public static Resources setLocale(Context context, String newLocale) {
        return new Resources(context).setLocale(newLocale);
    }

    /**
     * @param context
     *            A context object to access the
     *            {@link android.content.res.Resources} of the app.
     * @return this object for fluency.
     */
    public static Resources resetLocale(Context context) {
        return new Resources(context).resetLocale();
    }
}
